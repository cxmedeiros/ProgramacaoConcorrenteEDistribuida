// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sort_grpc.proto

package sort_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SortServiceClient is the client API for SortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SortServiceClient interface {
	MergeSort(ctx context.Context, in *SortRequest, opts ...grpc.CallOption) (*SortResponse, error)
	QuickSort(ctx context.Context, in *SortRequest, opts ...grpc.CallOption) (*SortResponse, error)
}

type sortServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSortServiceClient(cc grpc.ClientConnInterface) SortServiceClient {
	return &sortServiceClient{cc}
}

func (c *sortServiceClient) MergeSort(ctx context.Context, in *SortRequest, opts ...grpc.CallOption) (*SortResponse, error) {
	out := new(SortResponse)
	err := c.cc.Invoke(ctx, "/sort_grpc.SortService/MergeSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sortServiceClient) QuickSort(ctx context.Context, in *SortRequest, opts ...grpc.CallOption) (*SortResponse, error) {
	out := new(SortResponse)
	err := c.cc.Invoke(ctx, "/sort_grpc.SortService/QuickSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SortServiceServer is the server API for SortService service.
// All implementations must embed UnimplementedSortServiceServer
// for forward compatibility
type SortServiceServer interface {
	MergeSort(context.Context, *SortRequest) (*SortResponse, error)
	QuickSort(context.Context, *SortRequest) (*SortResponse, error)
	mustEmbedUnimplementedSortServiceServer()
}

// UnimplementedSortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSortServiceServer struct {
}

func (UnimplementedSortServiceServer) MergeSort(context.Context, *SortRequest) (*SortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeSort not implemented")
}
func (UnimplementedSortServiceServer) QuickSort(context.Context, *SortRequest) (*SortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuickSort not implemented")
}
func (UnimplementedSortServiceServer) mustEmbedUnimplementedSortServiceServer() {}

// UnsafeSortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SortServiceServer will
// result in compilation errors.
type UnsafeSortServiceServer interface {
	mustEmbedUnimplementedSortServiceServer()
}

func RegisterSortServiceServer(s grpc.ServiceRegistrar, srv SortServiceServer) {
	s.RegisterService(&SortService_ServiceDesc, srv)
}

func _SortService_MergeSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortServiceServer).MergeSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sort_grpc.SortService/MergeSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortServiceServer).MergeSort(ctx, req.(*SortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SortService_QuickSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortServiceServer).QuickSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sort_grpc.SortService/QuickSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortServiceServer).QuickSort(ctx, req.(*SortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SortService_ServiceDesc is the grpc.ServiceDesc for SortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sort_grpc.SortService",
	HandlerType: (*SortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeSort",
			Handler:    _SortService_MergeSort_Handler,
		},
		{
			MethodName: "QuickSort",
			Handler:    _SortService_QuickSort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sort_grpc.proto",
}
