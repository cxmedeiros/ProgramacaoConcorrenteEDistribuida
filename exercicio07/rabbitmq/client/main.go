package main

import (
	"context"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"
	"time"

	"github.com/google/uuid"
	amqp "github.com/rabbitmq/amqp091-go"
)

var ArrayInt [1000]int

func failOnError(err error, msg string) {
	if err != nil {
		log.Panicf("%s: %s", msg, err)
	}
}

func measureTime(ch *amqp.Channel, q amqp.Queue, replyQueueName string, body []byte) {
	correlationId := uuid.New().String()

	// startTime := time.Now()
	err := ch.PublishWithContext(
		context.Background(),
		"",
		q.Name,
		false,
		false,
		amqp.Publishing{
			ContentType:   "application/json",
			Body:          body,
			ReplyTo:       replyQueueName,
			CorrelationId: correlationId,
		})
	failOnError(err, "Failed to publish a message")

	// return correlationId
	// startTime := time.Now()
	// time.Since(startTime)
}

func main() {
	ArrayInt = [1000]int{}

	var Array [1000]int64
	for i := 0; i < len(ArrayInt); i++ {
		Array[i] = int64(i)
	}

	countStr := os.Getenv("COUNT")
	count, err := strconv.Atoi(countStr)
	if err != nil {
		log.Fatalf("Invalid COUNT value: %v", err)
	}

	timestamp := time.Now().Format("2006-01-02_15h-04m-05s")
	filePath := "temp/message_times_" + timestamp + ".csv"
	csvFile, err := os.Create(filePath)
	failOnError(err, "Failed to create CSV file")
	defer csvFile.Close()

	writer := csv.NewWriter(csvFile)
	defer writer.Flush()

	err = writer.Write([]string{"Num Messages", "Average Time (s)"})
	failOnError(err, "Failed to write CSV header")

	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()

	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := ch.QueueDeclare(
		"task_queue",
		true,
		false,
		false,
		false,
		nil,
	)
	failOnError(err, "Failed to declare a queue")

	replyQueue, err := ch.QueueDeclare(
		"",
		false,
		false,
		true,
		false,
		nil,
	)
	failOnError(err, "Failed to declare a reply queue")

	msgs, err := ch.Consume(
		replyQueue.Name,
		"",
		true,
		false,
		false,
		false,
		nil,
	)
	failOnError(err, "Failed to register a consumer")

	var wg sync.WaitGroup
	wg.Add(count)

	responses := make(map[string]string)

	go func() {
		for d := range msgs {
			responses[d.CorrelationId] = string(d.Body)
			wg.Done()
		}
	}()

	body, err := json.Marshal(Array)
	failOnError(err, "Failed to encode array to JSON")

	startTime := time.Now()
	for i := 0; i < count; i++ {
		measureTime(ch, q, replyQueue.Name, body)
	}
	wg.Wait()
	totalTime := time.Since(startTime)
	fmt.Printf("%v", totalTime)

	averageTime := totalTime.Seconds() / float64(count)
	fmt.Printf("%v", averageTime)
	fmt.Printf("Average time for %d messages (after trimming): %.6f seconds\n", count, averageTime)

	writer.Write([]string{fmt.Sprintf("%d", count), fmt.Sprintf("%.6f", averageTime)})
	writer.Flush()
}
